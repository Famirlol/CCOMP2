#include <iostream>
using namespace std;

struct Asc {};
struct Desc {};

template <typename T>
class Pivot {
    T x; 
public:
    Pivot(T a) : x(a) {}

    void Asc(T lista[], int tam) {
        int izquierda = 0;
        int derecha = tam - 1;

        while (izquierda <= derecha) {

            while (lista[izquierda] < x) {
                izquierda++;
            }

            while (lista[derecha] >= x) {
                derecha--;
            }

            if (izquierda < derecha) {
                swap(lista[izquierda], lista[derecha]);
            }
        }


        for (int i = 0; i < tam; i++) {
            if (lista[i] == x) {
                swap(lista[i], lista[izquierda]);
                break;
            }
        }

    }
    void Des(T lista[], int tam) {
        int izquierda = 0;
        int derecha = tam - 1;

        while (izquierda <= derecha) {

            while (lista[izquierda] > x) {
                izquierda++;
            }

            while (lista[derecha] <= x) {
                derecha--;
            }
            if (izquierda < derecha) {
                swap(lista[izquierda], lista[derecha]);
            }
        }
        for (int i = 0; i < tam; i++) {
            if (lista[i] == x) {
                swap(lista[i], lista[izquierda]);
                break;
            }
        }

    }


};

int main() {
    const int tam = 7;
    int listaAsc[tam] = {10, 5, 7, 20, 15, 3, 8};
    int listaDesc[tam] = {10, 5, 7, 20, 15, 3, 8};
    int pivote = 15;

    Pivot<int> l(pivote);

    cout << "Lista original: ";
    for (int i = 0; i < tam; i++) {
        cout << listaAsc[i] << " ";
    }
    cout << endl;

    l.Asc(listaAsc, tam);
    cout << "Lista ordenada ascendente con pivote: " << pivote << endl;
    for (int i = 0; i < tam; i++) {
        cout << listaAsc[i] << " ";
    }
    cout << endl;

    l.Des(listaDesc, tam);
    cout << "Lista ordenada descendente con pivote: " << pivote << endl;
    for (int i = 0; i < tam; i++) {
        cout << listaDesc[i] << " ";
    }
    cout << endl;

    return 0;
}
