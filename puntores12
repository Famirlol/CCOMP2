#include <iostream>
using namespace std;


template <typename T>
struct ASC {
    bool operator()(T a, T b) {
        return a < b;
    }
};

template <typename T>
struct DESC {
    bool operator()(T a, T b) {
        return a > b;
    }
};


template <typename T, template <typename> class intercambio>
class Pivot {
    T pivote;
    intercambio<T> cambio;

public:
    Pivot(T _pivote) : pivote(_pivote) {}

    void operator()(T* lista, int tam) {
        int izquierda = 0;
        int derecha = tam - 1;


        int pivotubicacionprimera = 0;
        for (int i = 0; i < tam; ++i) {
            if (lista[i] == pivote) {
                pivotubicacionprimera = i;
            }
        }

        swap(lista[0], lista[pivotubicacionprimera]);

        T ubicacionpivot = lista[0];
        izquierda = 1;


        while (izquierda <= derecha) {
            while (izquierda <= derecha && cambio(lista[izquierda], ubicacionpivot)) {
                izquierda++;
            }
            while (izquierda <= derecha && !cambio(lista[derecha], ubicacionpivot)) {
                derecha--;
            }
            if (izquierda < derecha) {
                swap(lista[izquierda], lista[derecha]);
            }
        }

        swap(lista[0], lista[derecha]);
    }

};

int main() {
    const int tam = 8;
    int arrAsc[tam] = { 10, 5, 7, 20, 15, 3, 8, 13 };
    int arrDesc[tam] = { 10, 5, 7, 20, 15, 3, 8, 13 };
    int pivote = 13;

    cout << "Arreglo original:" << endl;
    for (int i = 0; i < tam; ++i) {
        cout << arrAsc[i] << " ";
    }
    cout << endl;


    cout << "\nOrden Ascendente con pivote " << pivote << ":" << endl;
    Pivot<int, ASC> ascPivot(pivote);
    ascPivot(arrAsc, tam);
    for (int i = 0; i < tam; ++i) {
        cout << arrAsc[i] << " ";
    }
    cout << endl;


    cout << "\nOrden Descendente con pivote " << pivote << ":" << endl;
    Pivot<int, DESC> descPivot(pivote);
    descPivot(arrDesc, tam);
    for (int i = 0; i < tam; ++i) {
        cout << arrDesc[i] << " ";
    }
    cout << endl;

    return 0;
}
